server:
  port: ${SERVER_PORT:9103}

spring:

  application:
    name: micro_emails

  profiles:
    active:
      - "prod"
  config:
#    import: "optional:configserver:http://localhost:8071/"
    import: "optional:configserver:http://${CONFIG_SERVER:localhost}:${CONFIG_SERVER_PORT:8071}/"

  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:micro_emails}?createDatabaseIfNotExist=true&serverTimezone=UTC
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:root}
    sql-script-encoding: UTF-8
    characterEncoding: UTF-8
    hikari:
      pool-name: poll_micro_emails
      maxLifetime: 1800000
      connection-timeout: 40000
      idle-timeout: 300000
      maximum-pool-size: 2

  jpa:
    database: MYSQL # Especifica o banco para o Spring acionar configuração automática para a maioria dos aspectos
    hibernate: # Define configurações específicas do Hibernate
      ddl-auto: update
      naming: # Controla como o Hibernate nomeia tabelas e colunas
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl # Define a estratégia padrão, snake_case para nomes
    properties: # Define propriedades específicas do Hibernate
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect # Garante compatibilidade com tipo de dados e geração de SQL
        format_sql: true # Habilita a formatação das instruções SQL para melhor legibilidade
        use_sql_comments: true # Diz ao Hibernate para adicionar comentários ao SQL gerado para ajudar na compreensão
        type: # Define mapeamento de tipo personalizado
          enumType:
            type: pgsql_enum
        jdbc:
          log: # Controla o registro de logs do JDBC
            non_contextual_creation: true
#    database-platform: org.hibernate.dialect.MySQLDialect
    open-in-view: false # Desativa a manutenção de objetos de sessão do Hibernate na camada de visualização, o que é recomendado para desempenho e gerenciamento de recursos.
    generate-ddl: true # Gerará o schema quando o aplicativo for iniciado. Coligado com ddl-auto update.
    show-sql: true # Habilita o registro das instruções SQL geradas durante a execução do aplicativo, o que pode ser útil para depuração e compreensão das interações com o banco de dados.

  sql: # Define scripts SQL a serem executados durante a inicialização do aplicativo. Ou seja, schema.sql disponível em resources
    init: # Configura o comportamento de inicialização.
      mode: always # Instrui o Spring a sempre executar o script de inicialização, mesmo que o schema do banco de dados já exista. No entanto, seja cauteloso com essa configuração, especialmente em ambientes de produção, pois pode sobrescrever dados existentes se o script fizer modificações. É recomendável usar uma abordagem mais seletiva como on_creation ou never, dependendo do seu caso de uso.


management: # Este bloco define as configurações de gerenciamento da sua aplicação. Ele controla quais endpoints de gerenciamento estão disponíveis e como eles podem ser acessados.
  endpoints:
    web:
      exposure:
        include: "*"
  #        include: "refresh"
  #        include: "busrefresh"
  #        include: prometheus,auditevents,beans,caches,conditions,configprops,env,flyway,health,httpexchanges,info,integrationgraph,loggers,metrics,mappings,quartz,scheduledtasks,sessions,shutdown,startup,threaddump
  endpoint:
    shutdown:
      enabled: true # Habilita o endpoint de desligamento, que permite encerrar a execução da aplicação através da interface web.
  info:
    env:
      enabled: true # Habilita a exibição de informações de ambiente na página de informações do Management.

endpoints: # Este bloco define configurações adicionais para endpoints da aplicação.
  shutdown: # Este sub-bloco define as configurações do endpoint de desligamento, que permite encerrar a execução da aplicação. A configuração enabled: true indica que o endpoint de desligamento está habilitado.
    enabled: true

eureka:
  instance:
    preferIpAddress: true # Define a preferência do cliente Eureka por utilizar o endereço IP ao invés do nome de host ao se registrar no Eureka Server.
  client:
    fetchRegistry: true # Habilita a busca por outros servidores Eureka pelo cliente. Isso permite que o cliente se sincronize com o registro de serviços mais recente, mesmo que o Eureka Server principal esteja indisponível.
    registerWithEureka: true # Instrui o cliente Eureka para se registrar no Eureka Server, anunciando sua presença e disponibilidade para outros serviços.
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/ # Define o URL base do Eureka Server para o qual o cliente se registrará e buscará informações de registro de serviços.

info: # Este bloco define informações sobre a sua aplicação que serão exibidas em diferentes contextos, como a página de informações do Management e logs.
  app:
    name: "micro_emails"
    description: "Microsserviços Micro_Emails"
    version: "1.0.0.0"


