name: microservices_app

services:

  microcustomers_postgres16:
    container_name: microcustomers_postgres16
    ports:
      - "5501:5432"
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_customers
    environment:
      - POSTGRES_DB=microcustomers
    extends:
      file: common-config.yml
      service: microservice-postgres16-config
    volumes:
      - microcustomers-postgresql-data:/var/lib/postgresql/data

  microempresas_postgres16:
    container_name: microempresas_postgres16
    ports:
      - "5502:5432"
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_empresas
    environment:
      - POSTGRES_DB=microempresas
    extends:
      file: common-config.yml
      service: microservice-postgres16-config
    volumes:
      - microempresas-postgresql-data:/var/lib/postgresql/data

  microemails_postgres16:
    container_name: microemails_postgres16
    ports:
      - "5503:5432"
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_emails
    environment:
      - POSTGRES_DB=microemails
    extends:
      file: common-config.yml
      service: microservice-postgres16-config
    volumes:
      - microemails-postgresql-data:/var/lib/postgresql/data


  redis:
#    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - comunicacao_geral
    volumes:
      - cache-redis:/data

  rabbit:
    image: rabbitmq:3.13.3-alpine
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - comunicacao_geral
    restart: unless-stopped


  configserver:
    container_name: configserver
    image: juniorsmartins/configserver:v1.0.4
    build:
      context: ../../micro_configserver/
      dockerfile: Dockerfile
      args:
        APP_NAME: "configserver"
        APP_VERSION: "v1.0.4"
        APP_DESCRIPTION: "Centralizar e gerenciar configurações de aplicações."
    ports:
      - "8888:8888"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      rabbit:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 30s
      retries: 20
      start_period: 30s
    networks:
      - comunicacao_geral
    environment:
      SPRING_APPLICATION_NAME: "configserver"
      SPRING_RABBITMQ_HOST: "rabbit"
    restart: unless-stopped
#    extends:
#      file: common-config.yml
#      service: microservice-resources-config

  eurekaserver:
    container_name: eurekaserver
    image: juniorsmartins/eurekaserver:v1.0.4
    build:
      context: ../../micro_eurekaserver/
      dockerfile: Dockerfile
      args:
        APP_NAME: "eurekaserver"
        APP_VERSION: "v1.0.4"
        APP_DESCRIPTION: "Gerenciar a comunicação e a descoberta de serviços."
    ports:
      - "8671:8671"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8671/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # intervalo de segundos após uma verificação anterior
      timeout: 30s
      retries: 10 # quantas tentativas deve fazer
      start_period: 30s # efetua a verificação após segundos do período de arranque
    restart: always
    networks:
      - comunicacao_geral
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/


  microcustomers:
    container_name: microcustomers
    image: juniorsmartins/microcustomers:v1.0.2
    build:
      context: ../../micro_customers/
      dockerfile: Dockerfile
      args:
        APP_NAME: "microcustomers"
        APP_VERSION: "v1.0.2"
        APP_DESCRIPTION: "Gerenciar clientes Pessoa Física."
    ports:
      - "9101:9101"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_customers
    environment:
      DB_HOST: microcustomers_postgres16
      DB_PORT: 5432
      DB_NAME: microcustomers
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SPRING_APPLICATION_NAME: "microcustomers"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      microcustomers_postgres16:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9101/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # Intervalo de segundos após uma verificação anterior
      timeout: 30s # Define o tempo máximo permitido para a execução do comando de teste. Se a verificação de saúde não responder em 10 segundos, ela será considerada malsucedida.
      retries: 10 # Quantas tentativas deve fazer
      start_period: 30s # Efetua a verificação após segundos do período de arranque

  microempresas:
    container_name: microempresas
    image: juniorsmartins/microempresas:v1.0.2
    build:
      context: ../../micro_empresas/
      dockerfile: Dockerfile
      args:
        APP_NAME: "microempresas"
        APP_VERSION: "v1.0.2"
        APP_DESCRIPTION: "Gerenciar clientes Pessoa Jurídica."
    ports:
      - "9102:9102"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_empresas
    environment:
      DB_HOST: microempresas_postgres16
      DB_PORT: 5432
      DB_NAME: microempresas
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SPRING_APPLICATION_NAME: "microempresas"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
    depends_on:
      eurekaserver:
        condition: service_healthy
      microempresas_postgres16:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9102/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # Intervalo de segundos após uma verificação anterior
      timeout: 30s # Define o tempo máximo permitido para a execução do comando de teste. Se a verificação de saúde não responder, ela será considerada malsucedida.
      retries: 10 # Quantas tentativas deve fazer
      start_period: 30s # Efetua a verificação após segundos do período de arranque

  microemails:
    container_name: microemails
    image: juniorsmartins/microemails:v1.0.2
    build:
      context: ../../micro_emails/
      dockerfile: Dockerfile
      args:
        APP_NAME: "microemails"
        APP_VERSION: "v1.0.2"
        APP_DESCRIPTION: "Gerenciar notificações via email."
    ports:
      - "9103:9103"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_emails
    environment:
      DB_HOST: microemails_postgres16
      DB_PORT: 5432
      DB_NAME: microemails
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SPRING_APPLICATION_NAME: "microemails"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      microemails_postgres16:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9103/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 30s


  gatewayserver:
    container_name: gatewayserver
    image: juniorsmartins/gatewayserver:v1.0.4
    build:
      context: ../../micro_gatewayserver/
      dockerfile: Dockerfile
      args:
        APP_NAME: "gatewayserver"
        APP_VERSION: "v1.0.4"
        APP_DESCRIPTION: "Ponto de entrada único e centralizado para as requisições de clientes externos."
    ports:
      - "8125:8125"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    restart: unless-stopped
    networks:
      - comunicacao_geral
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 5s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 5s
    depends_on:
      eurekaserver:
        condition: service_healthy
      microcustomers:
        condition: service_healthy
      microempresas:
        condition: service_healthy
      microemails:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8125/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 30s


# --------------------------------------------------------------------
# --------------------------- LOGS
# --------------------------------------------------------------------
  read:
    container_name: read
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks: &loki-dns
      comunicacao_geral:
        aliases:
          - loki

  write:
    container_name: write
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    container_name: alloy
    image: grafana/alloy:v1.0.0
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - comunicacao_geral

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2024-05-27T19-17-46Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 20s
      timeout: 20s
      retries: 5
    networks:
      - comunicacao_geral

  gateway:
    container_name: gateway
    image: nginx:1.25.5
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - comunicacao_geral

  backend:
    container_name: backend
    image: grafana/loki:3.0.0
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - comunicacao_geral

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - comunicacao_geral


# --------------------------------------------------------------------
# --------------------------- METRICS
# --------------------------------------------------------------------
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.51.0
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - comunicacao_geral


# --------------------------------------------------------------------
# --------------------------- TRACES
# --------------------------------------------------------------------
#  tempo:
#    container_name: tempo
#    image: grafana/tempo:2.4.2
#    command: -config.file /etc/tempo-config.yml
#    ports:
#      - "3110:3100"
#      - "4317:4317"
#    volumes:
#      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
#    networks:
#      - comunicacao_geral


# --------------------------------------------------------------------
# --------------------------- VOLUMES
# --------------------------------------------------------------------
volumes:
  microcustomers-postgresql-data:
    name: microcustomers-postgresql-data

  microempresas-postgresql-data:
    name: microempresas-postgresql-data

  microemails-postgresql-data:
    name: microemails-postgresql-data

  cache-redis:
    name: cache-redis


# --------------------------------------------------------------------
# --------------------------- NETWORKS
# --------------------------------------------------------------------
networks:
  comunicacao_geral:
    name: comunicacao_geral
    driver: bridge

  comunicacao_customers:
    name: comunicacao_customers
    driver: bridge

  comunicacao_empresas:
    name: comunicacao_empresas
    driver: bridge

  comunicacao_emails:
    name: comunicacao_emails
    driver: bridge


