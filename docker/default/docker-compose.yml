name: microservices_app

services:

  microcustomers_postgres16:
    container_name: microcustomers_postgres16
#    image: postgres:16.0
    ports:
      - "5501:5432"
    networks:
      - comunicacao_db_customers
    environment:
      - POSTGRES_DB=microcustomers
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
#      timeout: 10s # Tempo limite de espera antes de assumir como falha
#      retries: 10 # Quantidade de tentativas
#      interval: 10s # Intervalo entre tentativas
#      start_period: 10s # Tempo de delay antes de começar a checagem
    extends:
      file: common-config.yml
      service: microservice-postgres16-config
    volumes:
      - microcustomers-postgresql-data:/var/lib/postgresql/data
    restart: always

  microempresas_postgres16:
    container_name: microempresas_postgres16
    ports:
      - "5502:5432"
    networks:
      - comunicacao_db_empresas
    environment:
      - POSTGRES_DB=microempresas
    extends:
      file: common-config.yml
      service: microservice-postgres16-config
    volumes:
      - microempresas-postgresql-data:/var/lib/postgresql/data
    restart: always

  microemails_mysql8:
    container_name: microemails_mysql8
#    command: mysqld --default_authentication_plugin=mysql_native_password
    ports:
      - "3308:3308"
    expose:
      - 3308
    networks:
      - comunicacao_db_emails
    environment:
      MYSQL_DATABASE: microemails
#      MYSQL_ROOT_HOST: '%'
      MYSQL_TCP_PORT: 3308
    extends:
      file: common-config.yml
      service: microservice-mysql8-config
    volumes:
      - microemails-mysql-data:/var/lib/mysql
    restart: always


  rabbit:
#    image: rabbitmq:3.12-management
    image: rabbitmq:3.13.3-alpine
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
#      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 15s
      timeout: 10s
      retries: 2
      start_period: 20s
    networks:
      - comunicacao_geral
    restart: unless-stopped

  configserver:
    container_name: configserver
    image: juniorsmartins/configserver:v1.0.1
    build:
      context: ../../micro_configserver/
      dockerfile: Dockerfile
      args:
        APP_NAME: "configserver"
        APP_VERSION: "v1.0.1"
        APP_DESCRIPTION: "Centralizar e gerenciar configurações de aplicações eficientemente."
    ports:
      - "8888:8888"
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 512M
    depends_on:
      rabbit:
        condition: service_healthy
    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8888/ping"]
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
#      test: "curl --fail --silent localhost:8888/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status==\"UP\" else false end' > /dev/null || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    networks:
      - comunicacao_geral
    environment:
      SPRING_APPLICATION_NAME: "configserver"
      SPRING_RABBITMQ_HOST: "rabbit"
    restart: unless-stopped
#    extends:
#      file: common-config.yml
#      service: microservice-resources-config

  eurekaserver:
    container_name: eurekaserver
    image: juniorsmartins/eurekaserver:latest
    ports:
      - "8671:8671"
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 512M
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8671/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # intervalo de segundos após uma verificação anterior
      timeout: 10s
      retries: 2 # quantas tentativas deve fazer
      start_period: 15s # efetua a verificação após segundos do período de arranque
    restart: always
    networks:
      - comunicacao_geral
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/


  microcustomers:
    container_name: microcustomers
    image: juniorsmartins/microcustomers:latest
#    build:
#      context: .
#      dockerfile: ../../micro_customers/Dockerfile
    ports:
      - "9101:9101"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_db_customers
    environment:
      DB_HOST: microcustomers_postgres16
      DB_PORT: 5432
      DB_NAME: microcustomers
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SPRING_APPLICATION_NAME: "microcustomers"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
#    env_file:
#      - ./micro_customers/env/app.env
    depends_on:
      eurekaserver:
        condition: service_healthy
      microcustomers_postgres16:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9101/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # intervalo de segundos após uma verificação anterior
      timeout: 10s
      retries: 2 # quantas tentativas deve fazer
      start_period: 15s # efetua a verificação após segundos do período de arranque
#    extends:
#      file: common-config.yml
#      service: microservice-config

  microempresas:
    container_name: microempresas
    image: juniorsmartins/microempresas:latest
    ports:
      - "9102:9102"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_db_empresas
    environment:
      DB_HOST: microempresas_postgres16
      DB_PORT: 5432
      DB_NAME: microempresas
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SPRING_APPLICATION_NAME: "microempresas"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
    depends_on:
      eurekaserver:
        condition: service_healthy
      microempresas_postgres16:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9102/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # intervalo de segundos após uma verificação anterior
      timeout: 10s
      retries: 2 # quantas tentativas deve fazer
      start_period: 15s # efetua a verificação após segundos do período de arranque

  microemails:
    container_name: microemails
    image: juniorsmartins/microemails:latest
    ports:
      - "9103:9103"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
    restart: always
    networks:
      - comunicacao_geral
      - comunicacao_db_emails
    environment:
      TZ: UTC
      DB_HOST: microemails_mysql8
      DB_PORT: 3308
      DB_NAME: microemails
      DB_USERNAME: root
      DB_PASSWORD: root
      SPRING_APPLICATION_NAME: "microemails"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/
    depends_on:
      eurekaserver:
        condition: service_healthy
      microemails_mysql8:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9103/actuator/health/readiness | grep UP || exit 1"
      interval: 30s # intervalo de segundos após uma verificação anterior
      timeout: 10s
      retries: 2 # quantas tentativas deve fazer
      start_period: 15s # efetua a verificação após segundos do período de arranque


  gatewayserver:
    container_name: gatewayserver
    image: juniorsmartins/gatewayserver:latest
    ports:
      - "8125:8125"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      eurekaserver:
        condition: service_healthy
      microcustomers:
        condition: service_healthy
      microempresas:
        condition: service_healthy
      microemails:
        condition: service_healthy
    restart: always
    networks:
      - comunicacao_geral
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8888/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8671/eureka/

#  sonarqube_postgres16:
#    container_name: sonarqube_postgres16
#    image: postgres:16.0
#    networks:
#      - mercado_financeiro_net
#    environment:
#      - POSTGRES_DB=sonarqube
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - sonarqube-postgresql:/var/lib/postgresql
#      - sonarqube-postgresql-data:/var/lib/postgresql/data
#
#  sonarqube:
#    container_name: sonarqube
#    image: sonarqube:9.9.4-community
#    ports:
#      - "9000:9000"
#    networks:
#      - mercado_financeiro_net
#    environment:
#      - sonar.jdbc.url=jdbc:postgresql://sonarqube_postgres16:5432/sonarqube
#    volumes:
#      - sonarqube_conf:/opt/sonarqube/conf
#      - sonarqube_data:/opt/sonarqube/data
#      - sonarqube_extensions:/opt/sonarqube/extensions
#      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
#    depends_on:
#      - sonarqube_postgres16


#  artifactory_postgres16:
#    container_name: artifactory_postgres16
#    image: postgres:16.0
#    environment:
#      - POSTGRES_DB=artifactory
#      - POSTGRES_USER=artifactory
#      - POSTGRES_PASSWORD=artifactory
#    ports:
#      - "5532:5432"
#    restart: always
#    networks:
#      - mercado_financeiro_net
#    volumes:
#      - artifactory-postgresql-data:/var/lib/postgresql/data
#      - /etc/localtime:/etc/localtime:ro
#    deploy:
#      resources:
#        limits:
#          cpus: "1.0"
#          memory: 500m
#    logging:
#      driver: json-file
#      options:
#        max-size: "50m"
#        max-file: "10"
#    ulimits:
#      nproc: 65535
#      nofile:
#        soft: 32000
#        hard: 40000
#
#  artifactory:
#    container_name: artifactory
#    image: releases-docker.jfrog.io/jfrog/artifactory-oss:7.77.8
#    environment:
#      - ENABLE_MIGRATION=y
#      - JF_SHARED_DATABASE_TYPE=postgresql
#      - JF_SHARED_DATABASE_USERNAME=artifactory
#      - JF_SHARED_DATABASE_PASSWORD=artifactory
#      - JF_SHARED_DATABASE_URL=jdbc:postgresql://artifactory_postgres16:5432/artifactory
#      - JF_SHARED_DATABASE_DRIVER=org.postgresql.Driver
#      - JF_SHARED_NODE_IP=${JF_SHARED_NODE_IP}
#      - JF_SHARED_NODE_ID=${JF_SHARED_NODE_ID}
#      - JF_SHARED_NODE_NAME=${JF_SHARED_NODE_NAME}
#      - JF_ROUTER_ENTRYPOINTS_EXTERNALPORT=${JF_ROUTER_ENTRYPOINTS_EXTERNALPORT}
#    ports:
#      - ${JF_ROUTER_ENTRYPOINTS_EXTERNALPORT}:${JF_ROUTER_ENTRYPOINTS_EXTERNALPORT}
#      - "8081:8081"
#    volumes:
#      - artifactory-storage:/var/opt/jfrog/artifactory
#      - /etc/localtime:/etc/localtime:ro
#    restart: always
#    networks:
#      - mercado_financeiro_net
#    deploy:
#      resources:
#        limits:
#          cpus: "2.0"
#          memory: 4G
#    logging:
#      driver: json-file
#      options:
#        max-size: "50m"
#        max-file: "10"
#    ulimits:
#      nproc: 65535
#      nofile:
#        soft: 32000
#        hard: 40000
#    depends_on:
#      - artifactory_postgres16

#  jenkins:
#    container_name: jenkins
#    image: jenkins/jenkins:2.440.2-lts-jdk21
#    privileged: true
#    user: root
#    ports:
#      - "8080:8080"
#      - "50000:50000"
#    volumes:
#      - jenkins-docker-certs:/certs/client
#      - jenkins-home:/var/jenkins_home
#      - /var/run/docker.sock:/var/run/docker.sock
#    restart: always
#    networks:
#      - mercado_financeiro_net
#    depends_on:
#      - sonarqube
#      - artifactory



#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus:v2.51.0
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
#      - prometheus-storage:/prometheus
#    command:
#      - "--config.file=/etc/prometheus/prometheus.yaml"
#    restart: always
#    networks:
#      - mercado_financeiro_net
#
#  grafana:
#    container_name: grafana
#    image: grafana/grafana:10.3.5-ubuntu
#    ports:
#      - "3000:3000"
#    volumes:
#      - grafana-storage:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    networks:
#      - mercado_financeiro_net
#    depends_on:
#      - prometheus



volumes:
  microcustomers-postgresql-data:
    name: microcustomers-postgresql-data

  microempresas-postgresql-data:
    name: microempresas-postgresql-data

  microemails-mysql-data:
    name: microemails-mysql-data

#  sonarqube-postgresql:
#    name: sonarqube-postgresql
#  sonarqube-postgresql-data:
#    name: sonarqube-postgresql-data

#  sonarqube_conf:
#    name: sonarqube_conf
#  sonarqube_data:
#    name: sonarqube_data
#  sonarqube_extensions:
#    name: sonarqube_extensions
#  sonarqube_bundled-plugins:
#    name: sonarqube_bundled-plugins

#  artifactory-postgresql-data:
#    name: artifactory-postgresql-data
#  artifactory-storage:
#    name: artifactory-storage

#  jenkins-docker-certs:
#    name: jenkins-docker-certs
#  jenkins-home:
#    name: jenkins-home

#  prometheus-storage:
#    name: prometheus-storage
#  grafana-storage:
#    name: grafana-storage

networks:
  comunicacao_geral:
    name: comunicacao_geral
    driver: bridge
  comunicacao_db_customers:
    name: comunicacao_db_customers
    driver: bridge
  comunicacao_db_empresas:
    name: comunicacao_db_empresas
    driver: bridge
  comunicacao_db_emails:
    name: comunicacao_db_emails
    driver: bridge

# PORTAS
# Configserver - 8071
# EurekaServer - 8671
# GatewayServer - 8125

# Jenkins - 8080

# Micro_customers - 9101
# Micro_empresas - 9102
# Micro_emails - 9103

# Micro_customers-postgres16 - 5401
# Micro_empresas-postgres16 - 5402
# Micro_emails_mysql8 - 5403



# Actuator micro_emails - 9092
# Actuator micro_empresas - 9091

# Prometheus - 9090
# Grafana - 3000
# Sonarqube - 9000

# Artifactory - 8082
# Artifactory - 8081




