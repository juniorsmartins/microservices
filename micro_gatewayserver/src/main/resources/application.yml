server:
  port: ${SERVER_PORT:8125}

spring:

  application:
    name: "gatewayserver"

  config:
    import: "optional:configserver:http://localhost:8888/"
  cloud: # Essa seção, em conjunto com outras, define como a API Gateway se conecta e gerencia seus microsserviços.
    config:
      profile: default
      refresh:
        enabled: true # Permite buscar automaticamente as configurações atualizadas do servidor de configuração quando houver uma alteração, sem precisar reiniciar o aplicativo.
#      fail-fast: true
      fail-fast: false
      retry: # Este bloco de configuração define os parâmetros de retentativa, ou seja, como o cliente deve tentar novamente se a comunicação com o servidor de configuração falhar.
        initial-interval: 3000 # Especifica o intervalo inicial entre as tentativas de retentativa. Neste exemplo, está definido como 3000 milissegundos (ou 3 segundos). Isso significa que o cliente esperará 3 segundos antes de tentar a primeira retentativa após uma falha na comunicação.
        max-interval: 9000 # Define o intervalo máximo entre as tentativas de retentativa. Aqui, está definido como 9000 milissegundos (ou 9 segundos). Isso significa que o intervalo entre as tentativas aumentará progressivamente até atingir esse valor, se a retentativa for necessária várias vezes.
        max-attempts: 5 # Especifica o número máximo de tentativas de retentativa que o cliente fará antes de desistir. Neste caso, está definido como 3. Isso significa que o cliente tentará novamente a comunicação com o servidor de configuração no máximo três vezes antes de desistir.
    gateway: # Essa seção define as configurações específicas da API Gateway, que atua como ponto de entrada único para seus microsserviços.
      discovery: # Essa seção define como a API Gateway descobre os microsserviços que ela deve rotear o tráfego.
        locator: # Essa seção define o mecanismo de descoberta de serviço que a API Gateway utilizará.
          enabled: false # Essa configuração indica que a descoberta de serviço está ativada. Isso significa que a API Gateway buscará ativamente seus microsserviços em um repositório de descoberta.
          lowerCaseServiceId: true

  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

management: # Este bloco define as configurações de gerenciamento da sua aplicação. Ele controla quais endpoints de gerenciamento estão disponíveis e como eles podem ser acessados (Actuator).
  endpoints:
    web:
      exposure:
        include: "*"
#        include: health,refresh,busrefresh,shutdown,info,prometheus
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    gateway:
      enabled: true
  info:
    env:
      enabled: true # Habilita a exibição de informações de ambiente na página de informações do Management.

# colocado no servidor de configuração
#eureka:
#  instance:
#    preferIpAddress: true # Define a preferência do cliente Eureka por utilizar o endereço IP ao invés do nome de host ao se registrar no Eureka Server.
#  client:
#    fetchRegistry: true # Habilita a busca por outros servidores Eureka pelo cliente. Isso permite que o cliente se sincronize com o registro de serviços mais recente, mesmo que o Eureka Server principal esteja indisponível.
#    registerWithEureka: true # Instrui o cliente Eureka para se registrar no Eureka Server, anunciando sua presença e disponibilidade para outros serviços.
#    serviceUrl:
#      defaultZone: http://localhost:8671/eureka/ # Define o URL base do Eureka Server para o qual o cliente se registrará e buscará informações de registro de serviços.

info: # Este bloco define informações sobre a sua aplicação que serão exibidas em diferentes contextos, como a página de informações do Management e logs.
  app:
    name: "GatewayServer"
    description: "Microsserviços de API Gateway ou Edge Server (Ponto único de entrada)."
    version: "v1.0.1"

logging:
  level:
    microsservices:
      micro_gatewayserver: DEBUG

resilience4j.circuitbreaker:
  configs:
    default: # Usar default significa que as propriedades definidas abaixo se aplicarão em todos os CircuitBreakers. Porém, pode usar os nomes dos CBs para definir propriedades específicas para cada CB. Esses nomes foram definidos no ApiGatewayConfig
      slidingWindowSize: 10 # Define quantas solicitações deve monitorar antes de tentar alterar o status de fechado para aberto
      permittedNumberOfCallsInHalfOpenState: 2 # Número permitido de chamadas no status semiaberto. Com base nesse número permitido, o CB pode decidir se vai para o status aberto ou fechado
      failureRateThreshold: 30 # Limite de taxa de falha em porcentagem. Se falhar nesse limite, o CB poderá passar do status fechado para o aberto
      waitDurationInOpenState: 20000 # Duração da espera no status aberto em milisegundos. Ou seja, aguardará esse tempo sempre que tentar passar para o status semiaberto e permitir o tráfego parcial

