server:
  port: ${SERVER_PORT:8125}

spring:

  application:
    name: "gatewayserver"

  config:
    import: "optional:configserver:http://localhost:8888/"
  cloud: # Essa seção, em conjunto com outras, define como a API Gateway se conecta e como gerencia os microsserviços.
    config:
      profile: default
      refresh:
        enabled: true # Permite buscar automaticamente as configurações atualizadas do servidor de configuração quando houver uma alteração, sem precisar reiniciar o aplicativo.
#      fail-fast: true
      fail-fast: false
      retry: # Este bloco de configuração define os parâmetros de retentativa, ou seja, como o cliente deve tentar novamente se a comunicação com o servidor de configuração falhar.
        initial-interval: 3000 # Especifica o intervalo inicial entre as tentativas de retentativa. Neste exemplo, está definido como 3000 milissegundos (ou 3 segundos). Isso significa que o cliente esperará 3 segundos antes de tentar a primeira retentativa após uma falha na comunicação.
        max-interval: 9000 # Define o intervalo máximo entre as tentativas de retentativa. Aqui, está definido como 9000 milissegundos (ou 9 segundos). Isso significa que o intervalo entre as tentativas aumentará progressivamente até atingir esse valor, se a retentativa for necessária várias vezes.
        max-attempts: 5 # Especifica o número máximo de tentativas de retentativa que o cliente fará antes de desistir. Neste caso, está definido como 3. Isso significa que o cliente tentará novamente a comunicação com o servidor de configuração no máximo três vezes antes de desistir.
    gateway: # Essa seção define as configurações específicas da API Gateway, que atua como ponto de entrada único para os microsserviços.
      discovery: # Essa seção define como a API Gateway descobre os microsserviços que ela deve rotear o tráfego.
        locator: # Essa seção define o mecanismo de descoberta de serviço que a API Gateway utilizará.
          enabled: false # Essa configuração indica que a descoberta de serviço está ativada. Isso significa que a API Gateway buscará ativamente os microsserviços em um repositório de descoberta.
          lowerCaseServiceId: true
#      httpclient: # Configuração Global de Timeouts - Não precisa usar quando fizer configuração por DSL na ApiGatewayConfig
#        connect-timeout: 20000 # Limite de tempo de conexão entre Gateway e Microsserviços (definição global)
#        response-timeout: 100s # Limite de tempo de resposta da requisição (definição global)
  data:
    redis:
      connect-timeout: 10s
      host: localhost
      port: 6379
      timeout: 5s

  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

  task: # Configuração de Threads
    execution:
      pool:
        core-size: 5 # Mínimo de threads sempre disponíveis.
        max-size: 20 # Máximo de threads que podem ser criadas.
        queue-capacity: 100 # A fila pode armazenar até 200 tarefas antes de rejeitar novas.

management: # Este bloco define configurações de gerenciamento da aplicação. Ele controla quais endpoints de gerenciamento estão disponíveis e como eles podem ser acessados (Actuator).
  endpoints:
    web:
      exposure:
        include: "*"
#        include: health,refresh,busrefresh,shutdown,info,prometheus
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    gateway:
      enabled: true
  info:
    env:
      enabled: true # Habilita a exibição de informações de ambiente na página de informações do Management.
  metrics:
    tags:
      application: ${spring.application.name}

# colocado no servidor de configuração
#eureka:
#  instance:
#    preferIpAddress: true # Define a preferência do cliente Eureka por utilizar o endereço IP ao invés do nome de host ao se registrar no Eureka Server.
#  client:
#    fetchRegistry: true # Habilita a busca por outros servidores Eureka pelo cliente. Isso permite que o cliente se sincronize com o registro de serviços mais recente, mesmo que o Eureka Server principal esteja indisponível.
#    registerWithEureka: true # Instrui o cliente Eureka para se registrar no Eureka Server, anunciando sua presença e disponibilidade para outros serviços.
#    serviceUrl:
#      defaultZone: http://localhost:8671/eureka/ # Define o URL base do Eureka Server para o qual o cliente se registrará e buscará informações de registro de serviços.

info: # Este bloco define informações sobre a sua aplicação que serão exibidas em diferentes contextos, como a página de informações do Management e logs.
  app:
    name: "GatewayServer"
    description: "Microsserviços de API Gateway ou Edge Server (Ponto único de entrada)."
    version: "v1.0.2"

logging:
  level:
    microsservices:
      micro_gatewayserver: DEBUG
      gatewayserver: DEBUG
    io.github.resilience4j: DEBUG

resilience4j.circuitbreaker: # https://resilience4j.readme.io/docs/circuitbreaker
  configs:
    default: # Usar default significa que as propriedades definidas abaixo se aplicarão em todos os CircuitBreakers. Porém, pode usar os nomes dos CBs para definir propriedades específicas para cada CB (só trocar default pelo nome do CB). Esses nomes foram definidos no ApiGatewayConfig
      registerHealthIndicator: true # Indica se um indicador de saúde deve ser registrado. Permite que o estado do CircuitBreaker seja monitorado através de ferramentas de monitoramento.
      slidingWindowType: COUNT_BASED # Configura o tipo da janela deslizante usada para gravar o resultado das chamadas quando o CircuitBreaker está fechado. A janela deslizante pode ser baseada em contagem ou baseada no tempo. Se a janela de correr é COUNT_BASED, o último slidingWindowSizeAs chamadas são gravadas e agregadas. Se a janela de correr for TIME_BASED, as chamadas do último slidingWindowSizesegundos registrados e agregados.
      slidingWindowSize: 100 # Define quantas solicitações deve monitorar antes de tentar alterar o status de fechado para aberto
      minimumNumberOfCalls: 5 # Configura o número mínimo de chamadas que são necessárias (por período de janela deslizante) antes que o CircuitBreaker possa calcular a taxa de erro ou a taxa de chamada lenta. Por exemplo, se o mínimoNumberOfCalls for 10, pelo menos 10 chamadas devem ser registradas, antes que a taxa de falha possa ser calculada.
      permittedNumberOfCallsInHalfOpenState: 10 # Número permitido de chamadas no status semiaberto. Com base nesse número permitido, o CB pode decidir se vai para o status aberto ou fechado
      maxWaitDurationInHalfOpenState: 0 # Configura uma duração máxima de espera que controla a maior quantidade de tempo que um CircuitBreaker pode permanecer no estado Half Open, antes de alternar para abrir. Valor 0 significa que o Disjuntor esperaria infinitamente no Estado MeioAberto até que todas as chamadas permitidas fossem concluídas.
#      automaticTransitionFromOpenToHalfOpenEnabled: true # Se definido como verdadeiro, significa que o CircuitBreaker fará a transição automática de estado aberto para estado semi-aberto e nenhuma chamada é necessária para acionar a transição. Um thread é criado para monitorar todas as instâncias dos CircuitBreakers para fazer a transição para HALF_OPEN assim que o waitDurationInOpenState passar.
      waitDurationInOpenState: 5000 # Duração da espera no status aberto em milisegundos. Ou seja, aguardará esse tempo sempre que tentar passar para o status semiaberto e permitir o tráfego parcial
      failureRateThreshold: 50 # Limite de taxa de falha em porcentagem. Se falhar nesse limite, o CB poderá passar do status fechado para o aberto
#      slowCallRateThreshold: 100 # Configura limite em percentagem. O CircuitBreaker considera uma chamada como lenta quando a duração da chamada é maior. Quando a porcentagem de chamadas lentas é igual ou maior o limite, o CircuitBreaker transita para abrir e iniciar chamadas de curto-circuito.
      slowCallDurationThreshold: 60000 # Configura o limite de duração acima do qual as chamadas são consideradas lentas e aumenta a taxa de chamadas lentas.
      timeoutDurationInMilliseconds: 20000 # Define o tempo máximo de espera para uma resposta antes de considerar a chamada como falha
      eventConsumerBufferSize: 50 # Tamanho do buffer do consumidor de eventos. Define o número máximo de eventos que podem ser armazenados no buffer antes de serem processados.


